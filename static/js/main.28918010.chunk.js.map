{"version":3,"sources":["Helpers/Chords.ts","Helpers/Colors.ts","Helpers/MediaQueries.ts","CommonStyling.tsx","Context/Context.tsx","Components/CapoSelector.tsx","Components/ChordSelector.tsx","Helpers/ChordGrip.ts","Components/GuitarFret.tsx","Components/GuitarString.tsx","Components/GuitarNeck.tsx","Components/TransposedChord.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chord","Color","Black","White","Blue","Grey","DarkGrey","LightGrey","Wood","size","MediaQueries","aboveMobile","aboveTablet","aboveLaptop","StyledUl","styled","ul","allBaseChords","Object","values","AppContext","createContext","capoFret","updateCapo","console","log","currentChord","C","updateCurrentChord","ApplicationContextProvider","children","useState","setCapoFret","setChord","useCallback","fret","chord","Provider","value","CapoLi","li","selected","CapoSelector","useContext","map","onClick","fretNumber","number","toString","StyledLi","ChordSelector","chordGrip","result","Csharp","D","Dsharp","E","F","Fsharp","G","Gsharp","A","Bb","B","guitarString","FretWrapper","div","StyledFret","capoOn","StyledNumber","p","StyledDot","shouldBeVisible","GuitarFret","capo","guitarStringsThatShouldBePlayedAtThisFret","dotShouldBeVisible","toBePlayedAt","string","index","fretToBePlayed","renderDots","StyledGuitarString","StyledGuitarStringName","GuitarString","name","Container","Neck","StringContainer","StyledCapo","StyledCapoCurve","GuitarNeck","guitarStrings","currentGrip","setCurrentGrip","useEffect","getStringsForThisFret","StyledWrapper","StyledBackground","TransposedChord","newChordIndex","indexOf","actualNewIndex","length","transpose","BodyWrapper","MainWrapper","ChordWrapper","StyledTransposedTo","App","Helmet","rel","href","cross-origin","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28918010.chunk.js","sourcesContent":["export enum Chord {\n  C = 'C',\n  Csharp = 'C#',\n  D = 'D',\n  Dsharp = 'D#',\n  E = 'E',\n  F = 'F',\n  Fsharp = 'F#',\n  G = 'G',\n  Gsharp = 'G#',\n  A = 'A',\n  Bb = 'B flat',\n  B = 'B',\n}\n\nexport const allBaseChords = Object.values(Chord);\n","const Color = {\n  Black: '#000',\n  White: '#F3F3F3',\n  Blue: '#5257f4',\n  Grey: '#888',\n  DarkGrey: '#555',\n  LightGrey: '#f1f1f1',\n  Wood: '#e8c7b0'\n};\n\nexport default Color;\n","const size = {\n  mobile: '320px',\n  tablet: '768px',\n  laptop: '1024px',\n}\n\nexport const MediaQueries = {\n  aboveMobile: `(min-width: ${size.mobile})`,\n  aboveTablet: `(min-width: ${size.tablet})`,\n  aboveLaptop: `(min-width: ${size.laptop})`,\n};\n\nexport default MediaQueries;","import styled from 'styled-components';\nimport Color from './Helpers/Colors';\nimport MediaQueries from './Helpers/MediaQueries';\n\nexport const StyledUl = styled.ul`\n  height: 8rem;\n  width: 100%;\n  overflow: auto;\n  scroll-behavior: smooth;\n  list-style: none;\n  padding: 0;\n\n  /* width */\n  ::-webkit-scrollbar {\n    width: 10px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: ${Color.LightGrey};\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    background: ${Color.Grey};\n    border-radius: 10px;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: ${Color.DarkGrey};\n  }\n\n  @media ${MediaQueries.aboveTablet} {\n    height: 10rem;\n\n  }\n`;","import React, { createContext, useCallback, useState } from 'react';\nimport { Chord } from '../Helpers/Chords';\n\ntype AppContextType = {\n  capoFret: number;\n  updateCapo: (capoFret: number) => void;\n  currentChord: Chord;\n  updateCurrentChord: (chord: Chord) => void;\n};\n\nexport const AppContext = createContext<AppContextType>({\n  capoFret: 0,\n  updateCapo: () => console.log('no context provider'),\n  currentChord: Chord.C,\n  updateCurrentChord: () => console.log('no context provider'),\n});\n\nconst ApplicationContextProvider: React.FC = ({ children }) => {\n  const [capoFret, setCapoFret] = useState(0);\n  const [currentChord, setChord] = useState(Chord.C);\n\n  const updateCapo = useCallback((fret: number) => {\n    setCapoFret(fret);\n  }, []);\n\n  const updateCurrentChord = useCallback((chord: Chord) => {\n    setChord(chord);\n  }, []);\n\n  return (\n    <AppContext.Provider\n      value={{ capoFret, updateCapo, currentChord, updateCurrentChord }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default ApplicationContextProvider;\n","import React, { FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { StyledUl } from '../CommonStyling';\nimport { AppContext } from '../Context/Context';\nimport Color from '../Helpers/Colors';\n\nconst CapoLi = styled.li<{ selected?: boolean }>`\n  font-size: 2rem;\n  background: ${({ selected }) =>\n    selected ? Color.DarkGrey : Color.LightGrey};\n  color: ${({ selected }) => (selected ? Color.White : Color.Black)};\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst CapoSelector: FC = () => {\n  const { capoFret, updateCapo } = useContext(AppContext);\n\n  const capoFrets = [0, 1, 2, 3, 4, 5, 6];\n\n  const onFretClick = (fretNumber: number) => {\n    if (fretNumber === capoFret) {\n      updateCapo(0);\n    } else {\n      updateCapo(fretNumber);\n    }\n  };\n\n  const fretText = (number: number): string => {\n    return number === 0 ? 'None' : number.toString();\n  };\n\n  return (\n    <StyledUl>\n      {capoFrets.map((fret) => (\n        <CapoLi\n          key={fret}\n          selected={capoFret === fret}\n          onClick={() => onFretClick(fret)}\n        >\n          {fretText(fret)}\n        </CapoLi>\n      ))}\n    </StyledUl>\n  );\n};\n\nexport default CapoSelector;\n","import React, { FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { StyledUl } from '../CommonStyling';\nimport { AppContext } from '../Context/Context';\nimport { allBaseChords } from '../Helpers/Chords';\nimport Color from '../Helpers/Colors';\n\nconst StyledLi = styled.li<{ selected?: boolean }>`\n  font-size: 2rem;\n  background: ${({ selected }) =>\n    selected ? Color.DarkGrey : Color.LightGrey};\n  color: ${({ selected }) => (selected ? Color.White : Color.Black)};\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst ChordSelector: FC = () => {\n  const { currentChord, updateCurrentChord } = useContext(AppContext);\n\n  return (\n    <StyledUl>\n      {allBaseChords.map((chord) => (\n        <StyledLi\n          selected={currentChord === chord}\n          onClick={() => updateCurrentChord(chord)}\n          key={chord}\n        >\n          {chord}\n        </StyledLi>\n      ))}\n    </StyledUl>\n  );\n};\n\nexport default ChordSelector;\n","import { Chord } from './Chords';\n\nconst chordGrip = (chord: Chord, capoFret: number | null) => {\n  let result: (number | null)[] = [];\n  switch (chord) {\n    case Chord.C:\n      result = [null, 3, 2, 0, 1, 0];\n      break;\n    case Chord.Csharp:\n      result = [null, 4, 6, 6, 6, null];\n      break;\n    case Chord.D:\n      result = [null, null, 0, 2, 3, 2];\n      break;\n    case Chord.Dsharp:\n      result = [null, 6, 8, 8, 8, null];\n      break;\n    case Chord.E:\n      result = [0, 2, 2, 1, 0, 0];\n      break;\n    case Chord.F:\n      result = [1, 3, 3, 2, 1, 1];\n      break;\n    case Chord.Fsharp:\n      result = [2, 4, 4, 3, 2, 2];\n      break;\n    case Chord.G:\n      result = [3, 2, 0, 0, 0, 3];\n      break;\n    case Chord.Gsharp:\n      result = [4, 6, 6, 5, 4, 4];\n      break;\n    case Chord.A:\n      result = [null, 0, 2, 2, 2, 0];\n      break;\n    case Chord.Bb:\n      result = [0, 1, 3, 3, 3, null];\n      break;\n    case Chord.B:\n      result = [0, 2, 4, 4, 4, null];\n      break;\n\n    default:\n      break;\n  }\n\n  if (capoFret && capoFret > 0) {\n    const newResult = result.map((guitarString) => {\n      return guitarString !== null ? guitarString + 1 : guitarString;\n    });\n    return newResult;\n  }\n\n  return result;\n};\n\nexport default chordGrip;\n","import React, { FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { AppContext } from '../Context/Context';\nimport { Chord } from '../Helpers/Chords';\nimport { fretType } from '../Helpers/FretType';\n\nconst FretWrapper = styled.div`\n  padding: 0 0.25rem;\n  flex-grow: 1;\n  position: relative;\n`;\n\nconst StyledFret = styled.div<{ capoOn?: boolean }>`\n  width: 100%;\n  height: 100%;\n\n  background: ${({ capoOn }) => (capoOn ? 'black' : 'none')};\n  border-bottom: 1px solid black;\n  border-bottom: 1px solid black;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n\n  position: relative;\n  z-index: 2;\n`;\n\nconst StyledNumber = styled.p`\n  position: absolute;\n  right: -30%;\n  margin: 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst StyledDot = styled.div<{ shouldBeVisible: number | null }>`\n  border-radius: 40px;\n  border: 1px solid black;\n  background: grey;\n  width: 10px;\n  height: 10px;\n  z-index: 2;\n  visibility: ${({ shouldBeVisible: toBePlayedAt }) =>\n    toBePlayedAt ? 'visible' : 'hidden'};\n`;\n\ninterface GuitarFretProp {\n  onClick?: () => void;\n  fretNumber: number;\n  guitarStringsThatShouldBePlayedAtThisFret: fretType[];\n}\n\nconst GuitarFret: FC<GuitarFretProp> = ({\n  onClick,\n  fretNumber,\n  guitarStringsThatShouldBePlayedAtThisFret,\n}) => {\n  const { capoFret, currentChord } = useContext(AppContext);\n  const visuallyFirstFretThatCanBePlayed = 1;\n\n  const renderDots = (fretToBePlayed: fretType, index: number) => {\n    return (\n      <StyledDot\n        key={index}\n        shouldBeVisible={dotShouldBeVisible(fretToBePlayed)}\n      />\n    );\n  };\n\n  const dotShouldBeVisible = (toBePlayedAt: fretType) => {\n    if (capoFret > 0) {\n      return !!toBePlayedAt && visuallyFirstFretThatCanBePlayed !== toBePlayedAt\n        ? toBePlayedAt\n        : null;\n    }\n    return !!toBePlayedAt ? toBePlayedAt : null;\n  };\n\n  const calculateFretNumber = (capo: number, fret: number) => {\n    if (capo > 1) {\n      return capo + fret - 1;\n    }\n\n    return fret;\n  };\n\n  if (currentChord === Chord.C && capoFret > 1) {\n    console.log({ guitarStringsThatShouldBePlayedAtThisFret });\n  }\n\n  return (\n    <FretWrapper onClick={onClick}>\n      <StyledNumber>\n        {capoFret > 0 ? calculateFretNumber(capoFret, fretNumber) : fretNumber}\n      </StyledNumber>\n      <StyledFret>\n        {guitarStringsThatShouldBePlayedAtThisFret.map((string, index) =>\n          renderDots(string, index)\n        )}\n        {/* <StyledDot toBePlayed={currentGrip[fretNumber]} /> */}\n      </StyledFret>\n    </FretWrapper>\n  );\n};\n\nexport default GuitarFret;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport Color from '../Helpers/Colors';\n\nconst StyledGuitarString = styled.div`\n  width: 2px;\n  height: 100%;\n  background: ${Color.DarkGrey};\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n  z-index: 1;\n`;\n\nconst StyledGuitarStringName = styled.div`\n  position: absolute;\n  top: -1.25rem;\n  left: -0.25rem;\n`;\n\ninterface StringProps {\n  name: string;\n}\n\nconst GuitarString: FC<StringProps> = ({ name }) => (\n  <>\n    <StyledGuitarString>\n      <StyledGuitarStringName>{name}</StyledGuitarStringName>\n    </StyledGuitarString>\n  </>\n);\n\nexport default GuitarString;\n","import { FC, useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { AppContext } from '../Context/Context';\nimport chordGrip from '../Helpers/ChordGrip';\nimport Color from '../Helpers/Colors';\nimport GuitarFret from './GuitarFret';\nimport GuitarString from './GuitarString';\n\nconst Container = styled.div`\n  height: 10rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Neck = styled.div`\n  width: 8rem;\n  height: 9rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  position: relative;\n  border-left: 1px solid ${Color.DarkGrey};\n  border-right: 1px solid ${Color.DarkGrey};\n  background: ${Color.Wood};\n`;\n\nconst StringContainer = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 80%;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  left: 10%;\n`;\n\nconst StyledCapo = styled.div`\n  width: 135%;\n  height: 0.5rem;\n  background: black;\n  z-index: 1;\n  position: absolute;\n  left: -1rem;\n  top: 0.5rem;\n`;\n\nconst StyledCapoCurve = styled.div`\n  background: black;\n  z-index: -100;\n  position: absolute;\n  left: -0.5rem;\n  height: 1rem;\n  width: 0.75rem;\n  border-bottom-left-radius: 40px;\n`;\n\nconst GuitarNeck: FC = () => {\n  const frets: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const guitarStrings: string[] = ['E', 'A', 'D', 'G', 'B', 'e'];\n\n  const { capoFret, currentChord } = useContext(AppContext);\n\n  const [currentGrip, setCurrentGrip] = useState(\n    chordGrip(currentChord, capoFret)\n  );\n\n  useEffect(() => {\n    setCurrentGrip(chordGrip(currentChord, capoFret));\n  }, [currentChord, capoFret]);\n\n  const getStringsForThisFret = (fretNumber: number) => {\n    const guitarStringsToBePlayed = currentGrip.map((guitarString) =>\n      guitarString === fretNumber ? guitarString : null\n    );\n\n    return guitarStringsToBePlayed;\n  };\n\n  return (\n    <Container>\n      <Neck>\n        {frets.map((fretNumber, index) => (\n          <GuitarFret\n            fretNumber={fretNumber}\n            guitarStringsThatShouldBePlayedAtThisFret={getStringsForThisFret(\n              fretNumber\n            )}\n            key={index}\n          />\n        ))}\n\n        <StringContainer>\n          {guitarStrings &&\n            guitarStrings.map((guitarString) => (\n              <GuitarString name={guitarString} key={guitarString} />\n            ))}\n          {capoFret > 0 && (\n            <StyledCapo>\n              <StyledCapoCurve />\n            </StyledCapo>\n          )}\n        </StringContainer>\n      </Neck>\n    </Container>\n  );\n};\n\nexport default GuitarNeck;\n","import { FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { AppContext } from '../Context/Context';\nimport { allBaseChords } from '../Helpers/Chords';\nimport MediaQueries from '../Helpers/MediaQueries';\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst StyledBackground = styled.div`\n  border: 1px solid yellowgreen;\n  background: yellowgreen;\n  width: 100%;\n  height: 4rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  p {\n    font-size: 2.5rem;\n    height: auto;\n    margin: 0;\n    margin-bottom: 78px;\n    margin-block-end: 0;\n    margin-block-start: 0;\n  }\n\n  @media ${MediaQueries.aboveTablet} {\n    height: 6rem;\n\n    p {\n      font-size: 4rem;\n\n    }\n  }\n`;\n\nconst TransposedChord: FC = () => {\n  const { currentChord, capoFret } = useContext(AppContext);\n\n  const transpose = () => {\n    const currentChordIndex = allBaseChords.indexOf(currentChord);\n    const newChordIndex = currentChordIndex + capoFret;\n    let actualNewIndex = 0;\n\n    if (newChordIndex > allBaseChords.length - 1) {\n      actualNewIndex = newChordIndex - allBaseChords.length;\n    } else {\n      actualNewIndex = newChordIndex;\n    }\n\n    return allBaseChords[actualNewIndex];\n  };\n\n  return (\n    <StyledWrapper>\n      <StyledBackground>\n        <p>{transpose()}</p>\n      </StyledBackground>\n    </StyledWrapper>\n  );\n};\n\nexport default TransposedChord;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport './App.css';\nimport CapoSelector from './Components/CapoSelector';\nimport ChordSelector from './Components/ChordSelector';\nimport GuitarNeck from './Components/GuitarNeck';\nimport TransposedChord from './Components/TransposedChord';\nimport ApplicationContextProvider from './Context/Context';\nimport MediaQueries from './Helpers/MediaQueries';\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: center;\n  padding-top: 1rem;\n\n  @media ${MediaQueries.aboveTablet} {\n    width: 80%;\n  }\n`;\n\nconst ChordWrapper = styled.div`\n  display: flex;\n  max-height: 20rem;\n  flex-direction: column;\n  justify-content: space-between;\n  @media ${MediaQueries.aboveTablet} { \n    max-height: 25rem;\n  }\n`;\n\nconst StyledTransposedTo = styled.div`\n  font-size: 1.5rem;\n  margin: 0.75rem 0;\n\n  @media ${MediaQueries.aboveTablet} {\n    font-size: 2rem;\n    margin: 1rem 0;\n  }\n`;\n\nfunction App() {\n  return (\n    <ApplicationContextProvider>\n      <Helmet>\n        <link rel='preconnect' href='https://fonts.googleapis.com' />\n        <link rel='preconnect' href='https://fonts.gstatic.com' cross-origin />\n        <link\n          href='https://fonts.googleapis.com/css2?family=Lato&display=swap'\n          rel='stylesheet'\n        />\n      </Helmet>\n      <div className='App'>\n        <BodyWrapper>\n          <MainWrapper>\n            <GuitarNeck />\n            <ChordWrapper>\n              <h4>Select Capo</h4>\n              <CapoSelector />\n              <h4>Select Chord grip</h4>\n              <ChordSelector />\n            </ChordWrapper>\n            <StyledTransposedTo>\n              <span>Transpose to 👇</span>\n            </StyledTransposedTo>\n            <TransposedChord />\n          </MainWrapper>\n        </BodyWrapper>\n      </div>\n    </ApplicationContextProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}